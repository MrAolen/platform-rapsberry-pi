package com.gunther.rapsberry.bluetooth.bluetooth;

import javax.bluetooth.DiscoveryAgent;
import javax.bluetooth.LocalDevice;

/**
 * Hello world!
 *
 */
public class App {
	public static Object lock = new Object();
	private static Vector vecDevices = new Vector();

	public static void main(String[] args) {
		System.out.println("Hello World!");

		try {
			LocalDevice localDevice = LocalDevice.getLocalDevice();

			DiscoveryAgent agent = localDevice.getDiscoveryAgent();

			agent.startInquiry(DiscoveryAgent.GIAC, new BluetoothDeviceDiscovery());

			try {
				synchronized (lock) {
					lock.wait();
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.println("Device Inquiry Completed. ");
			int deviceCount=vecDevices.size();


			
			if(deviceCount <= 0){ System.out.println(“No Devices Found .”); } else{ //print bluetooth device addresses and names in the format [ No. address (name) ] System.out.println(“Bluetooth Devices: “); for (int i = 0; i < deviceCount; i++) { RemoteDevice remoteDevice=(RemoteDevice)vecDevices.elementAt(i); System.out.println((i+1)+”. “+remoteDevice.getBluetoothAddress()+” (“+remoteDevice.getFriendlyName(true)+”)”); } } }//end main //methods of DiscoveryListener /** * This call back method will be called for each discovered bluetooth devices. */ public void deviceDiscovered(RemoteDevice btDevice, DeviceClass cod) { System.out.println(“Device discovered: “+btDevice.getBluetoothAddress()); //add the device to the vector if(!vecDevices.contains(btDevice)){ vecDevices.addElement(btDevice); } } //no need to implement this method since services are not being discovered public void servicesDiscovered(int transID, ServiceRecord[] servRecord) { } //no need to implement this method since services are not being discovered public void serviceSearchCompleted(int transID, int respCode) { } /** * This callback method will be called when the device discovery is * completed. */ public void inquiryCompleted(int discType) { synchronized(lock){ lock.notify(); } switch (discType) { case DiscoveryListener.INQUIRY_COMPLETED : System.out.println(“INQUIRY_COMPLETED”); break; case DiscoveryListener.INQUIRY_TERMINATED : System.out.println(“INQUIRY_TERMINATED”); break; case DiscoveryListener.INQUIRY_ERROR : System.out.println(“INQUIRY_ERROR”); break; default : System.out.println(“Unknown Response Code”); break; } }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
